[project]
name = "inv-vmware-opa"
version = "0.5.0"  # Can be dynamic with setuptools-scm
description = "VMware inventory management CLI with backup/restore and label quality analysis"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10,<4.0"
license = "MIT"  # SPDX license expression
license-files = ["LICENSE", "LICENSE.txt", "LICEN[CS]E*"]
authors = [
    {name = "Sebastien Brun", email = "brun_s@example.com"}
]
keywords = ["vmware", "inventory", "cli", "dashboard", "analytics", "vsphere"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Typing :: Typed",
]
maintainers = [
    {name = "Sebastien Brun", email = "brun_s@example.com"}
]

dependencies = [
    "click>=8.3.0,<9.0.0",
    "openpyxl>=3.1.5,<4.0.0",
    "pandas>=2.3.3,<3.0.0",
    "sqlalchemy>=2.0.44,<3.0.0",
    "xlsxwriter>=3.2.0,<4.0.0",
    "tabulate>=0.9.0,<1.0.0",
]

[project.optional-dependencies]
dashboard = [
    "streamlit>=1.40.0,<2.0.0",
    "plotly>=5.24.0,<6.0.0",
    "streamlit-extras>=0.7.8,<1.0.0",
    "watchdog>=6.0.0,<7.0.0",
]
reports = [
    "reportlab>=4.4.4,<5.0.0",
    "pillow>=11.3.0,<12.0.0",
    "matplotlib>=3.10.7,<4.0.0",
]
all = ["inv-vmware-opa[dashboard,reports]"]

[project.urls]
Homepage = "https://github.com/brunseba/inv-vmware-opa"
Documentation = "https://github.com/brunseba/inv-vmware-opa/docs"
Repository = "https://github.com/brunseba/inv-vmware-opa"
Issues = "https://github.com/brunseba/inv-vmware-opa/issues"
Changelog = "https://github.com/brunseba/inv-vmware-opa/blob/main/CHANGELOG.md"

[project.scripts]
vmware-inv = "src.cli:cli"
vmware-dashboard = "src.dashboard.app:main"
vmware-report = "src.report_generator:main"

[project.entry-points."mkdocs.plugins"]
# Reserve for future mkdocs plugin if needed

# Custom scripts for development tasks
[project.entry-points.console_scripts]
vmware-inv-test = "pytest:main"
vmware-inv-lint = "ruff:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = false
include-package-data = true
py-modules = []

# Uncomment below to enable dynamic versioning from git tags
# Requires setuptools-scm in build-system.requires
# [build-system]
# requires = ["setuptools>=61.0", "wheel", "setuptools-scm>=8.0"]
#
# [tool.setuptools_scm]
# write_to = "src/_version.py"
# version_scheme = "post-release"
# local_scheme = "no-local-version"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
src = ["dashboard/*.py", "dashboard/pages/*.py"]

[dependency-groups]
dev = [
    "pytest>=8.4.2,<9.0.0",
    "pytest-cov>=7.0.0,<8.0.0",
    "pytest-faker>=2.0.0,<3.0.0",
    "pytest-xdist>=3.6.0,<4.0.0",  # Parallel test execution
    "pytest-timeout>=2.3.0,<3.0.0",  # Test timeouts
    "pytest-benchmark>=5.1.0,<6.0.0",  # Performance benchmarking
    "pytest-mock>=3.14.0,<4.0.0",  # Enhanced mocking
    "mkdocs>=1.6.1,<2.0.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7,<2.0.0",
    "mkdocs-material>=9.6.22,<10.0.0",
    "mkdocs-with-pdf>=0.9.3,<1.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0,<2.0.0",  # Mermaid diagrams
]
security = [
    "bandit>=1.7.0,<2.0.0",
    "safety>=3.0.0,<4.0.0",
    "pip-audit>=2.8.0,<3.0.0",  # Audit dependencies
]
lint = [
    "ruff>=0.8.0,<1.0.0",
    "mypy>=1.13.0,<2.0.0",
    "types-tabulate>=0.9.0,<1.0.0",
    "pandas-stubs>=2.0.0,<3.0.0",
    "vulture>=2.14.0,<3.0.0",  # Dead code detection
    "interrogate>=1.7.0,<2.0.0",  # Docstring coverage
]
performance = [
    "py-spy>=0.3.0,<1.0.0",  # Sampling profiler
    "memray>=1.15.0,<2.0.0",  # Memory profiler
    "scalene>=1.5.0,<2.0.0",  # CPU+GPU+memory profiler
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=json",
    "--cov-report=lcov",
    "-v",
    "--tb=short",
    "--disable-warnings",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests (quick sanity checks)",
    "database: marks tests that require database",
    "vmware: marks tests that interact with VMware APIs",
    "dashboard: marks tests for dashboard functionality",
    "performance: marks tests that benchmark performance",
    "security: marks security-related tests",
    "regression: marks regression tests",
    "wip: marks work-in-progress tests (skip in CI)",
    "flaky: marks tests that are occasionally flaky",
]
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
# timeout = 300  # Requires pytest-timeout plugin
# timeout_method = "thread"
# Performance benchmarking
[tool.pytest.ini_options.benchmark]
min_rounds = 5
max_time = 1.0
min_time = 0.000005
timer = "time.perf_counter"

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
data_file = ".coverage"
omit = [
    "tests/*",
    "src/dashboard/*",
    "*/__init__.py",
    "*/migrations/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

[tool.coverage.lcov]
output = "coverage.lcov"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]  # Allow unused args and asserts in tests
"__init__.py" = ["F401"]     # Allow unused imports in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when adding type hints
ignore_missing_imports = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # B101: assert_used, B601: paramiko_calls

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true
known_first_party = ["src"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
]

[tool.pylint.format]
max-line-length = 120

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
exclude = ["*.venv*", "build/", "dist/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["visit_*", "do_*"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 50
exclude = ["setup.py", "docs", "build", "tests"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
generate-badge = "."
badge-format = "svg"

[tool.memray]
output = "memray-results"
format = "html"

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]
match = "(?!test_).*\\.py"
match-dir = "(?!tests|migrations)[^\\.]*"
